plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
//version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// elasticsearch
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'co.elastic.clients:elasticsearch-java:8.5.3'
    implementation 'org.elasticsearch.client:elasticsearch-rest-client:8.5.3'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
	implementation 'jakarta.json:jakarta.json-api:2.0.1'
	implementation 'org.json:json:20160810'
	// elasticsearch
	implementation 'org.yaml:snakeyaml'
	//springfox + swagger
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'io.springfox:springfox-bean-validators:3.0.0'
	//springfox + swagger
	// to read exel files
	implementation 'org.apache.commons:commons-collections4:4.1'
	implementation 'org.apache.poi:poi:3.17'
	implementation 'org.apache.poi:poi-ooxml:3.17'
	implementation 'org.apache.poi:poi-ooxml-schemas:3.17'
	implementation 'org.apache.xmlbeans:xmlbeans:2.6.0'
	// to read exel files
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('getGitBuildInfo') {
	group 'custom'
	description 'Displays build information in format of current month, current day and four last symbols of git commit hash'
	doFirst {
		def gitFolder = "$projectDir/.git/"
		def takeFromHash = 4
		def gitId = ""

		def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD

		def isCommit = head.length == 1
		def headEnd = 0
		def headStart = 0

		if(isCommit) {
			gitId = head[0].trim()
			headEnd = gitId.size()
			headStart = headEnd - takeFromHash
		} else {
			def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
			gitId = refHead.text.trim()
			headEnd = gitId.size()
			headStart = headEnd - takeFromHash
		}

		def shortId = gitId.substring(headStart, headEnd)
		var now = LocalDate.now()

		println "Build inforamtion: ${now.format("MMdd")}${shortId}"
	}
}

tasks.bootRun {
    dependsOn("getGitBuildInfo")
}